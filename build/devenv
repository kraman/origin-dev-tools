#!/usr/bin/env ruby

$: << File.expand_path(File.dirname(__FILE__))

require 'rubygems'
require 'fileutils'
require 'pp'
require 'yaml'
require 'thor'
require 'setup_helper'

module Origin
  class BuilderPlugin < Thor
    include Origin::SetupHelper
    include Thor::Actions
    attr_reader :repo_parent_dir, :origin_rpms_dir, :distro_name, :distro_version
    
    def initialize(args=[], options={}, config={})
      super(args, options, config)
      ensure_build_requirements()
      require 'origin_constants'
      
      @repo_parent_dir = File.expand_path("#{File.dirname(__FILE__)}/../../")
      @origin_rpms_dir = File.expand_path("#{self.repo_parent_dir}/origin-rpms")
      @distro_name = `lsb_release -i`.gsub(/Distributor ID:\s*/,'').strip
      @distro_version = `lsb_release -r`.gsub(/Release:\s*/,'').strip
    end

    desc "test", "Runs all tests"
    # Runs unit, integration and functional tests. Assumes that broker and node components
    # are both installed and configured locally.
    #
    # @param options [Hash] Thor options hash
    #   - --verbose: Enable verbose logging
    def test
      require "lib/openshift/test_helper"
      require "lib/openshift/origin_local_dev_helper"      
      extend Origin::TestHelper
      extend Origin::OriginLocalDevHelper      
      prepare_test_dirs
      run_tests(method(:local_test_proc))
    end

    desc "build", "Builds and installs all packages locally"
    method_option :verbose, :type => :boolean, :desc => "Enable verbose logging"
    method_option :clean, :type => :boolean, :desc => "Erase existing packages before install?"
    method_option :update_packages, :type => :boolean, :desc => "Run yum update before install?"
    # Performs an complete build and install of OpenShift Origin packages.
    #
    # @param options [Hash] Thor options hash
    #   - --verbose: Enable verbose logging
    #   - --clean: Uninstall any existing Origin packages before performing the build
    #   - --update-packages: Perform a yum update before starting the build
    def build
      options.verbose? ? @@log.level = Logger::DEBUG : @@log.level = Logger::ERROR
      require "lib/openshift/build_helper"
      extend Origin::BuildHelper
      create_local_rpm_repository(true) unless options.incremental
      update_rpms() if options.update_packages
      erase_rpms(get_packages.keys) if options.clean
      
      clone_source_repos                  
      install_required_packages

      packages_to_install = find_and_build_specs
      Dir.glob("/tmp/tito/noarch/*.rpm").each do |file|
        FileUtils.cp(file, origin_rpms_dir)
      end
      Dir.glob("/tmp/tito/x86_64/*.rpm").each do |file|
        FileUtils.cp(file, origin_rpms_dir)
      end
      create_local_rpm_repository(false)
      install_rpms(packages_to_install)
    end
    
    desc "build_ec2 NAME BUILD_NUM", "Build a new development AMI with the given NAME"
    method_option :register, :type => :boolean, :desc => "Register the instance"
    method_option :terminate, :type => :boolean, :desc => "Terminate the instance on exit"
    method_option :branch, :default => "master", :desc => "Build instance off the specified branch"
    method_option :yum_repo, :default => "candidate", :desc => "Build instance off the specified yum repository"
    method_option :reboot, :type => :boolean, :desc => "Reboot the instance after updating"
    method_option :verbose, :type => :boolean, :desc => "Enable verbose logging"
    method_option :official, :type => :boolean, :desc => "For official use.  Send emails, etc."
    method_option :exclude_broker, :type => :boolean, :desc => "Exclude broker tests"
    method_option :exclude_runtime, :type => :boolean, :desc => "Exclude runtime tests"
    method_option :exclude_site, :type => :boolean, :desc => "Exclude site tests"
    method_option :exclude_rhc, :type => :boolean, :desc => "Exclude rhc tests"
    method_option :include_web, :type => :boolean, :desc => "Include running Selenium tests"
    method_option :include_coverage, :type => :boolean, :desc => "Include coverage analysis on unit tests"
    method_option :include_extended, :required => false, :desc => "Include extended tests"
    method_option :region, :required => false, :desc => "Amazon region override (default us-east-1)"
    method_option :install_from_source, :type => :boolean, :desc => "Indicates whether to build based off origin/master"
    method_option :install_from_local_source, :type => :boolean, :desc => "Indicates whether to build based on your local source"
    method_option :install_required_packages, :type => :boolean, :desc => "Create an instance with all the packages required by OpenShift"
    method_option :skip_verify, :type => :boolean, :desc => "Skip running tests to verify the build"
    method_option :instance_type, :required => false, :desc => "Amazon machine type override (default c1.medium)"
    method_option :extra_rpm_dir, :required => false, :dessc => "Directory containing extra rpms to be installed"
    def build_ec2(name, build_num)
      options.verbose? ? @@log.level = Logger::DEBUG : @@log.level = Logger::ERROR
      require "lib/openshift/test_helper"
      require "lib/openshift/origin_ec2_dev_helper"
      require "lib/openshift/remote_helper"
      extend Origin::TestHelper
      extend Origin::RemoteHelper      
      extend Origin::OriginEc2DevHelper

      build_ami(name, build_num)
    end
    
    desc "update", "Performs an incremental build and updates installed OpenShift Origin packages"
    # Performs an incremental build and updates installed OpenShift Origin packages.
    # This task can only be performed if there are code changes after a full build.
    #
    # @param options [Hash] Thor options hash
    #   - --verbose: Enable verbose logging
    def update
      options.verbose? ? @@log.level = Logger::DEBUG : @@log.level = Logger::ERROR
      incremental_build(false, false)
      create_local_rpm_repository(false)
    end

    desc "install_required_packages", "Install all dependencies required by OpenShift Origin packages, as specified in their spec files"
    method_option :verbose, :type => :boolean, :desc => "Enable verbose logging"
    # Task to setup RPM repositories and install all dependencies required by OpenShift Origin packages, as specified in their spec files.
    # This task is optional and was added so that developers could snapshot their VM after the dependendencies have been installed.
    # This task is automatically invoked when running a build.
    #
    # @param options [Hash] Thor options hash
    #   - --verbose: Enable verbose logging
    def install_required_packages
      options.verbose? ? @@log.level = Logger::DEBUG : @@log.level = Logger::ERROR
      require "lib/openshift/build_helper"
      extend Origin::BuildHelper
      
      install_rpms(["vim-enhanced","make","tig","mlocate","bash-completion"])
      install_gems({"rake" => "","parseconfig" => "", "aws-sdk" => "", "yard" => "", "redcarpet" => "", "rspec" => "1.1.12"})
  
      if self.distro_name == 'Fedora'
        unless File.exist?("/etc/yum.repos.d/jenkins.repo")
          puts "Installing Jenkins repository"      
          run "wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo"
          run "rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key"
        end
      end

      packages = get_required_packages().uniq
      install_rpms(packages, true)
    end

    desc "docs", "Build OpenShift Origin Ruby documentation"
    method_option :verbose, :type => :boolean, :desc => "Enable verbose logging"
    # Task to build YARD documentation for all Ruby Code
    #
    # @param options [Hash] Thor options hash
    #   - --verbose: Enable verbose logging
    def docs
      remove_dir "#{self.repo_parent_dir}/openshift-docs"
      empty_directory "#{self.repo_parent_dir}/openshift-docs"
      run "yardoc --private --protected --title 'Openshift Development Tools' --readme README.md --output-dir '#{self.repo_parent_dir}/openshift-docs/origin-dev-tools' #{self.repo_parent_dir}/origin-dev-tools/**/*"
    end

    desc "build_livecd", "Build a Fedora 17 Remix CD with OpenShift Origin installed"
    # Task to build a Fedora 17 Remix CD with OpenShift Origin installed
    def build_livecd
      basedir = "/root"
      remix_dir = "/root/origin-server/remix"
      remix_ks = "openshift-origin-remix.ks"  
      
      FileUtils.mkdir_p remix_dir
      git_rev = `git log --pretty="format:%H %cd" -1`
      
      system "rm -f #{remix_dir}/#{remix_ks}"
      ks_data = File.read("/usr/share/openshift/kickstarts/#{remix_ks}").gsub(/#ADDITIONAL REPOS/, "repo --name=local-build --baseurl=file://#{basedir}/origin-rpms\n#ADDITIONAL REPOS")
      ks_data.gsub!(/#GIT_REV#/,git_rev)
      
      if File.exist?("#{basedir}/extras")
        system "createrepo #{basedir}/extras"
        ks_data.gsub!(/#ADDITIONAL REPOS/, "repo --name=local-extras --baseurl=file://#{basedir}/extras\n#ADDITIONAL REPOS")
        #ks_data.gsub!(/#cartridge/,"cartridge")
      end
      File.open("#{remix_dir}/#{remix_ks}", 'w') do |out|
        out << ks_data
      end
      
      run "/sbin/service mongod stop"
      run "/usr/sbin/setenforce 0"
      run "cd #{remix_dir} && livecd-creator -c openshift-origin-remix.ks -f openshift_origin --cache=cache -d -v --logfile=livecd.log"
      run "/usr/sbin/setenforce 1"
      run "/sbin/service mongod start"
    end
    
    desc "clone_source_repos BRANCH", "Clones all the source repositories needed to build OpenShift Origin"
    method_option :clean, :type => :boolean, :desc => "Delete and recreate the repositories if the already exist"
    def clone_source_repos(branch="master")
      require "lib/openshift/git"
      extend Origin::Git
      clone_repos(branch, options.clean)
    end
  end
end
Origin::BuilderPlugin.start
