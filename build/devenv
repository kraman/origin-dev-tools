#!/usr/bin/env ruby

$: << File.expand_path(File.dirname(__FILE__))

require 'rubygems'
require 'thor'
require 'fileutils'
require 'origin_constants'
require 'lib/openshift'
require 'pp'
require 'yaml'
require 'builder'

include FileUtils

module Origin
  class BuilderPlugin < OpenShift::Builder
    include OpenShift::BuilderHelper

    #desc "build_livecd NAME", "Creates a livecd from a launched Origin instance"
    #method_option :verbose, :type => :boolean, :desc => "Enable verbose logging"
    #method_option :region, :required => false, :desc => "Amazon region override (default us-east-1)"
    #method_option :terminate, :type => :boolean, :desc => "Terminate the instance on exit"
    #def build_livecd(name)
    #  options.verbose? ? @@log.level = Logger::DEBUG : @@log.level = Logger::ERROR

    #  # Get the hostname from a tag lookup or assume it's SSH accessible directly
    #  conn = connect(options.region)
    #  instance = find_instance(conn, name, true, true, ssh_user)
    #  hostname = instance.dns_name
    #  puts "Done"
    #  puts "Hostname: #{hostname}"
  
    #  begin
    #    puts "Launching live-cd build..."
    #    out = ssh(hostname, "export PATH=/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:$PATH && cd /data/origin-server/build && rake devcd", 60 * 60 * 2, false, 1, "ec2-user")
    #    puts "Done"
    #  ensure
    #    terminate_instance(instance) if options.terminate?
    #  end
    #end

    desc "build_livecd", "Build a livecd"
    def build_livecd
      basedir = "/root"
      remix_dir = "/root/origin-server/remix"
      remix_ks = "openshift-origin-remix.ks"  
      
      FileUtils.mkdir_p remix_dir
      git_rev = `git log --pretty="format:%H %cd" -1`
      
      system "rm -f #{remix_dir}/#{remix_ks}"
      ks_data = File.read("/usr/share/openshift/kickstarts/#{remix_ks}").gsub(/#ADDITIONAL REPOS/, "repo --name=local-build --baseurl=file://#{basedir}/origin-rpms\n#ADDITIONAL REPOS")
      ks_data.gsub!(/#GIT_REV#/,git_rev)
      
      if File.exist?("#{basedir}/extras")
        system "createrepo #{basedir}/extras"
        ks_data.gsub!(/#ADDITIONAL REPOS/, "repo --name=local-extras --baseurl=file://#{basedir}/extras\n#ADDITIONAL REPOS")
        #ks_data.gsub!(/#cartridge/,"cartridge")
      end
      File.open("#{remix_dir}/#{remix_ks}", 'w') do |out|
        out << ks_data
      end
      
      run "/sbin/service mongod stop"
      run "/usr/sbin/setenforce 0"
      run "cd #{remix_dir} && livecd-creator -c openshift-origin-remix.ks -f openshift_origin --cache=cache -d -v --logfile=livecd.log"
      run "/usr/sbin/setenforce 1"
      run "/sbin/service mongod start"
    end

    no_tasks do
      alias_method :old_install_required_packages, :install_required_packages
    end

    def install_required_packages
      puts "Install packages required for build"
      run "yum install -y tito rubygems rubygem-rake yum-priorities git vim rubygem-thor rubygem-parseconfig make rubygem-aws-sdk tig mlocate bash-completion rubygem-yard rubygem-redcarpet ruby-devel redhat-lsb wget"
 
      FileUtils.rm_f "/etc/yum.repos.d/openshift-origin.repo"
      File.open("/etc/yum.repos.d/openshift-origin.repo", 'w') do |out|
        out << repo_string
      end

      puts "Installing required gems..."
      run("gem install rspec -v '1.1.12'", options)

      if DISTRO_NAME == 'Fedora'
        run "wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo"
        run "rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key"
      end

      old_install_required_packages
    end
    
    desc "local_build", "Builds and installs all packages locally"
    method_option :verbose, :type => :boolean, :desc => "Enable verbose logging"
    method_option :clean_packages, :type => :boolean, :desc => "Erase existing packages before install?"
    method_option :update_packages, :type => :boolean, :desc => "Run yum update before install?"
    method_option :incremental, :type => :boolean, :desc => "Build only the changed packages"
    def local_build
      options.verbose? ? @@log.level = Logger::DEBUG : @@log.level = Logger::ERROR
      if options.incremental
        options.retry_failure_with_tag = false
        update
      else
        FileUtils.rm_f "/etc/yum.repos.d/openshift-origin.repo"
        FileUtils.rm_f "/etc/yum.repos.d/local-openshift-origin.repo"
        FileUtils.rm_rf "/tmp/tito"
        
        packages = get_packages(false, true).values

        if options.clean_packages?
          run("yum clean all", options)
          package_names = "\"#{packages.join("\" \"")}\""
          puts "Removing stale packages..."
          run("yum erase -y #{package_names}", options)
        end
        
        if options.update_packages?
          puts "Updating all packages on the system..."
          run("yum update -y --exclude='rhc*, ruby, ruby-*, qpid-*'", options)
          puts "Done"
        end

        find_and_build_specs
        
        File.open("/etc/yum.repos.d/openshift-origin.repo", 'w') do |out|
          out << repo_string
        end

        FileUtils.rm_rf "/root/origin-rpms"
        FileUtils.mkdir_p "/root/origin-rpms"
        File.open("/etc/yum.repos.d/local-openshift-origin.repo", 'w') do |out|
          out << local_repo_string
        end
        run("cp /tmp/tito/x86_64/*.rpm /root/origin-rpms/; cp /tmp/tito/noarch/*.rpm /root/origin-rpms/; createrepo /root/origin-rpms/", options)
        
        packages_to_install = packages.select{ |p| not IGNORE_PACKAGES.include?(p.name) }
        package_list = "\"#{packages_to_install.join("\" \"")}\""
        run("yum install -y #{package_list}", options)

        #mark all packages as sync'd
        get_sync_dirs

        # Create the default express.conf file
        if !File.exists?("/root/.openshift/express.conf")
          run("mkdir -p /root/.openshift", options)
          run("touch /root/.openshift/express.conf", options)
          run("echo 'libra_server=localhost' > /root/.openshift/express.conf", options)
        end
      end
    end


    no_tasks do

      def local_repo_string
        <<-EOF
[openshift-origin]
name    = openshift-origin
baseurl = file:///root/origin-rpms
gpgcheck= 0
enabled = 1
retries = 0
EOF
      end

      def repo_string
        if DISTRO_NAME == 'Fedora'
        <<-EOF
[openshift-origin-nightly]
name    = openshift-origin-nightly
baseurl = http://mirror.openshift.com/pub/origin-server/fedora-$releasever/$basearch
gpgcheck= 0
enabled = 1
retries = 0
EOF
        else
        <<-EOF
[openshift-origin-nightly]
name    = openshift-origin-nightly
baseurl = http://mirror.openshift.com/pub/origin-server/rhel-6/$basearch
gpgcheck= 0
enabled = 1
retries = 0
EOF
        end
      end
      
      def ssh_user
        return "ec2-user"
      end

      def download_artifacts(hostname)
        puts "Downloading logs and screenshots..."
        `rm -rf rhc/log; mkdir -p rhc/log/; pushd rhc/log > /dev/null; mkdir -p broker mcollective system screenshots selenium jbossas broker-profiler coverage; popd > /dev/null`
        scp_from(hostname, "/tmp/rhc/*", "rhc/log", 60, ssh_user)
        scp_from(hostname, "/var/www/openshift/broker/httpd/logs/access_log", "rhc/log/broker/access_log.log", 60, ssh_user)
        scp_from(hostname, "/var/www/openshift/broker/httpd/logs/error_log", "rhc/log/broker/error_log.log", 60, ssh_user)
        scp_from(hostname, "/var/www/openshift/broker/log/*", "rhc/log/broker", 60, ssh_user)
        scp_from(hostname, "/var/log/openshift/user_action.log", "rhc/log/broker/user_action.log", 60, ssh_user)
        scp_from(hostname, "/var/log/mcollective.*", "rhc/log/mcollective", 60, ssh_user)
        scp_from(hostname, "/var/log/httpd/access_log", "rhc/log/system/access_log.log", 60, ssh_user)
        scp_from(hostname, "/var/log/httpd/error_log", "rhc/log/system/error_log.log", 60, ssh_user)
        scp_from(hostname, "/var/log/yum.log", "rhc/log/system/yum.log", 60, ssh_user)
        scp_from(hostname, "/var/log/messages", "rhc/log/system/messages.log", 60, ssh_user)
        scp_from(hostname, "/var/log/secure", "rhc/log/system/secure.log", 60, ssh_user)
        scp_from(hostname, "/var/log/audit/audit.log", "rhc/log/system/audit.log", 60, ssh_user)
        scp_from(hostname, "/tmp/rhc/*_coverage", "rhc/log/coverage", 60, ssh_user)
        puts "Done"
      end
      
      def validate_instance(hostname, num_tries=1)
      end
      
      def update_cucumber_tests(hostname, repo_parent_dir="/root", user="root")
        ssh(hostname, "rm -f #{repo_parent_dir}/openshift-test/tests; ln -s #{repo_parent_dir}/openshift-test/controller/test/cucumber #{repo_parent_dir}/openshift-test/tests ;", 60, false, 2, user)
      end

      def setup_verifier(hostname, branch)
        print "Initializing git repo for syncing..."
        init_repos(hostname, true, nil, "~", ssh_user)
        puts "Done"
        update_remote_tests(hostname, branch, "~", ssh_user)
      end

      def rpm_manifest(hostname, sshuser="root")
        print "Retrieving RPM manifest.."
        manifest = ssh(hostname, 'rpm -qa | grep -E "(rhc|openshift)" | grep -v cartridge', 60, false, 1, sshuser)
        manifest = manifest.split("\n").sort.join(" / ")
        # Trim down the output to 255 characters
        manifest.gsub!(/rubygem-([a-z])/, '\1')
        manifest.gsub!('openshift-origin-', '')
        manifest.gsub!('mcollective-', 'mco-')
        manifest.gsub!('.fc16', '')
        manifest.gsub!('.noarch', '')
        manifest.gsub!(/\.git\.[a-z0-9\.]+/, '')
        manifest = manifest[0..254]
        puts "Done"
        return manifest
      end

      def test_impl(tag, hostname, instance, conn, options, image_id=nil)
        begin
          
          validate_instance(hostname, 4)
  
          #disable_charlie(hostname) if options.disable_charlie?
          
          mcollective_logs(hostname) if options.mcollective_logs?
  
          #idle_all_gears(hostname) unless options.official?
          
          reset_test_dir(hostname)
  
          #broker_profiler(hostname) if options.profile_broker?
  
          test_queues = [[], [], [], []]
            
          extended_tests = nil
          if options.include_extended
            extended_tests = []
            extended_tests = options.include_extended.split(",").map do |extended_test|
              extended_test.strip
            end
          end
  
          if options.include_extended
            extended_tests.each do |extended_test|
              case extended_test
              when 'broker'
                test_queues[0] << ["REST API Group 1", "su -c \"cucumber #{CUCUMBER_OPTIONS} -t @broker_api1 openshift-test/tests\"", {:retry_individually => true}]
                test_queues[1] << ["REST API Group 2", "su -c \"cucumber #{CUCUMBER_OPTIONS} -t @broker_api2 openshift-test/tests\"", {:retry_individually => true}]
                test_queues[2] << ["REST API Group 3", "su -c \"cucumber #{CUCUMBER_OPTIONS} -t @broker_api3 openshift-test/tests\"", {:retry_individually => true}]
                test_queues[3] << ["REST API Group 4", "su -c \"cucumber #{CUCUMBER_OPTIONS} -t @broker_api4 openshift-test/tests\"", {:retry_individually => true}]
                
                # The broker_key initializer in controller needs to be fixed before the test below can pass
                #test_queues[3] << ["OpenShift Origin Broker Unit Ext 1", "cd openshift-test/broker; bundle exec rake test:oo_unit_ext1", {:retry_individually => true}]
              when 'runtime'
                test_queues[0] << ["Extended Runtime Group 1", "su -c \"cucumber #{CUCUMBER_OPTIONS} -t @runtime_extended1 openshift-test/tests\""]
                test_queues[1] << ["Extended Runtime Group 2", "su -c \"cucumber #{CUCUMBER_OPTIONS} -t @runtime_extended2 openshift-test/tests\""]
                test_queues[2] << ["Extended Runtime Group 3", "su -c \"cucumber #{CUCUMBER_OPTIONS} -t @runtime_extended3 openshift-test/tests\""]
              when 'site'
                puts "Warning: Site tests are currently not supported"
              when 'rhc'
                test_queues[0] << ["RHC Extended", "su -c \"cucumber #{CUCUMBER_OPTIONS} -t @rhc_extended openshift-test/tests\"", {:retry_individually => true}]
                test_queues[1] << ["RHC Integration", "cd openshift-test/rhc && RHC_SERVER=localhost QUIET=1 bundle exec \"cucumber #{CUCUMBER_OPTIONS} features\"", {:retry_individually => true}]
              else
                puts "Not supported for extended: #{extended_test}"
                exit 1
              end
            end
          elsif options.include_coverage?
            #test_queues[0] << ["OpenShift Origin Node Unit Coverage", "cd openshift-test/node; rake rcov; cp -a coverage /tmp/rhc/openshift_node_coverage"]
            #test_queues[1] << ["OpenShift Origin Broker Unit and Functional Coverage", "cd openshift-test/broker; rake rcov; cp -a test/coverage /tmp/rhc/openshift_broker_coverage"]
          elsif options.include_cucumber
            timeout = @@SSH_TIMEOUT
            timeout = @@SSH_TIMEOUT_OVERRIDES[options.include_cucumber] if not @@SSH_TIMEOUT_OVERRIDES[options.include_cucumber].nil?
            test_queues[0] << [options.include_cucumber, "cucumber #{CUCUMBER_OPTIONS} -t @#{options.include_cucumber} openshift-test/tests", {:timeout => timeout}]
          elsif options.include_web?
            puts "Warning: Tests for the website are currently not supported"
          else
  
            unless options.exclude_broker?
              test_queues[0] << ["OpenShift Origin Broker Functional", "cd openshift-test/broker; su -c \"bundle exec rake test:functionals\""]
              test_queues[1] << ["OpenShift Origin Broker Integration", "cd openshift-test/broker; su -c \"bundle exec rake test:integration\""]
              test_queues[1] << ["OpenShift Origin Broker Unit 1", "cd openshift-test/broker; su -c \"bundle exec rake test:oo_unit1\""]
              test_queues[1] << ["OpenShift Origin Broker Unit 2", "cd openshift-test/broker; su -c \"bundle exec rake test:oo_unit2\""]
              test_queues[2] << ["Broker Cucumber", "su -c \"cucumber --strict -f html --out /tmp/rhc/broker_cucumber.html -f progress -t @broker -t ~@rhel-only openshift-test/tests\""]
            end

            unless options.exclude_runtime?
              #test_queues[3] << ["Runtime Unit", "cd openshift-test/node; su -c \"rake unit_test\""]
              (1..4).each do |i|
                test_queues[i-1] << ["Runtime Group #{i.to_s}", "su -c \"cucumber #{CUCUMBER_OPTIONS} -t @runtime#{i.to_s} openshift-test/tests\""]
              end
            end
  
            unless options.exclude_site?
            end

            unless options.exclude_rhc?
            end
          end
  
          threads = []
          failures = []
  
          retry_threshold = 0
          test_queues.each do |test_queue|
            titles = []
            cmds = []
            retry_individually = []
            timeouts = []
            test_queue.each do |test|
              titles << test[0]
              cmds << test[1]
              opts = test[2] || {}
              retry_individually << opts[:retry_individually] ? true : false
              timeouts << opts[:timeout] ? opts[:timeout] : @@SSH_TIMEOUT
              retry_threshold += 8
            end
            add_ssh_cmd_to_threads(hostname, threads, failures, titles, cmds, retry_individually, timeouts, ssh_user)
          end
  
          threads.each do |t|
            t[0].join
          end
  
          failures.uniq!
  
          begin
            if failures.length > 0 && failures.length <= retry_threshold 
              #idle_all_gears(hostname)
              retry_test_failures(hostname, failures, 2, timeout=@@SSH_TIMEOUT, ssh_user)
            elsif failures.length > retry_threshold
              exit 1
            end
  
            # These are special tests that cannot be written to work concurrently
            if options.include_extended
              extended_tests.each do |extended_test|
                case extended_test
                when 'broker'
                when 'runtime'
                  singleton_queue = ['Singletons', "su -c \"cucumber #{CUCUMBER_OPTIONS} -t @singleton openshift-test/tests\""]
                  output, exit_code = run_ssh(hostname, singleton_queue[0], singleton_queue[1], timeout=@@SSH_TIMEOUT, ssh_user)
                  retry_test_failures(hostname, [singleton_queue], 2, timeout=@@SSH_TIMEOUT, ssh_user) if 0 != exit_code
                when 'site'
                when 'rhc'
                else
                  puts "Not supported for extended: #{extended_test}"
                  exit 1
                end
              end
            end
  
            validate_instance(hostname, 4)
          end
  
          if options.official?
            image_id = image_id ? image_id : instance.image_id
            # Mark the image as verified
            image = conn.images[image_id]
            verify_image(image)
  
            puts "Sending QE ready email..."
            begin
              send_verified_email(image_id, image.name)
            rescue Exception => e
              puts "Failed sending email with message: #{e.message}"
            end
          end
  
          puts "Done"
  
        ensure
          download_artifacts(hostname)
          
          begin
            terminate_instance(instance) if options.terminate?
          rescue
            # suppress termination errors - they have been logged already
          end
        end
      end

      def sync_impl(name, options)
        # Get the hostname from a tag lookup or assume it's SSH accessible directly
        hostname = get_host_by_name_or_tag(name, options, ssh_user)

        clone_commands, working_dirs = sync_available_sibling_repos(hostname, "~", ssh_user)
        update_remote_tests(hostname, nil, "~", ssh_user)
        
        ret = 0
        if !options.skip_build?
          puts "Performing remote install..."

          out, ret = ssh(hostname, "rm -rf #{working_dirs}; #{clone_commands}", 60 * 5, true, 1, ssh_user)
          print_and_exit(ret, out) if ret != 0

          out, ret = ssh(hostname, "su -c \"yum clean metadata\"", 60 * 2, true, 2, ssh_user) if options.clean_metadata?
          print_and_exit(ret, out) if ret != 0
          
          out, ret = ssh(hostname, "su -c \"cd origin-dev-tools; build/devenv update #{options.verbose? ? '--verbose' : ''} #{options.clean_metadata? ? '--include_stale' : ''} 2>&1 \"", 60 * 15, true, 1, ssh_user) if ret == 0
          print_and_exit(ret, out) if ret != 0

          out, ret = ssh(hostname, "su -c \"#{options.clean_metadata? ? "yum update -y rhc *openshift*" : ''}\"", 60 * 15, true, 1, ssh_user) if options.clean_metadata?
          print_and_exit(ret, out) if ret != 0
        end

        puts "Done"
      end
  
      def build_impl(name, build_num, image, conn, options)
        $amz_options[:block_device_mappings] = {"/dev/sdb" => "ephemeral0"}

        puts "Launching AMI: #{image.id} - #{image.name}"
        instance = launch_instance(image, name + "_" + build_num, 1, ssh_user)

        hostname = instance.dns_name
        puts "Done"
        puts "Hostname: #{hostname}"
        
        ret, out = 0, nil
        begin
          if options.install_required_packages?
            puts "Starting yum update..."
            out, ret = ssh(hostname, "su -c \"yum -y update --exclude=\\\"ruby ruby-libs ruby-rdoc ruby-irb ruby-devel ruby-qpid-* qpid-*\\\"\"", 60 * 20, true, 1, ssh_user)
            print_and_exit(ret, out) if ret != 0

            print_highlighted_output("Update Output", out)
          end

          puts "Installing packages required for build..."
          out, ret = ssh(hostname, "su -c \"yum install -y git vim tito rubygems rubygem-thor rubygem-parseconfig ruby rubygem-rake rubygem-aws-sdk yum-priorities\"", 60 * 10, true, 1, ssh_user)
          print_and_exit(ret, out) if ret != 0
          print_highlighted_output("Install Output", out)

          puts "Creating mount..."
          out, ret = ssh(hostname, "su -c \"umount -l /data ; if [ ! -b /dev/xvdb ]; then /sbin/mke2fs /dev/xvdb; fi; mkdir -p /data && mount /dev/xvdb /data && chown -R ec2-user:ec2-user /data/\"", 60 * 10, true, 1, ssh_user)
          print_and_exit(ret, out) if ret != 0

          init_repos(hostname, true, nil, "/data", ssh_user)
          clone_commands, working_dirs = '', ''

          if options.install_from_local_source?
            puts "Performing clean install from local source..."
            clone_commands, working_dirs = sync_available_sibling_repos(hostname, "/data", ssh_user)
          else
            SIBLING_REPOS.each do |repo_name, repo_dirs|
              working_dirs += "#{repo_name} "
              clone_commands += "git clone #{repo_name}-bare #{repo_name}; "
              clone_commands += "pushd #{repo_name}; git checkout #{options.branch}; popd; "
            end
          end
          out, ret = ssh(hostname, "cd /data; rm -rf #{working_dirs}; #{clone_commands}", 60 * 5, true, 2, ssh_user)
          print_and_exit(ret, out) if ret != 0
          puts "Done"

          if options[:extra_rpm_dir]
            if File.exist? options[:extra_rpm_dir]
              out, ret = ssh(hostname, "mkdir -p /data/origin-server/build/extras", 60, true, 1, ssh_user)
              files = Dir.glob("#{options[:extra_rpm_dir]}/*.rpm")
              files.each do |file|
                scp_to(hostname, file, "/data/origin-server/build/extras/", 60*10, 5, ssh_user)
              end

              out, ret = ssh(hostname, "su -c \"cd /data/origin-server/build/extras && yum install -y *.rpm\"", 60 * 20, true, 1, ssh_user)
            else
              puts "!!!Warning!!!"
              puts "Directory containing extra rpms not found. Skipping..."
              puts "!!!Warning!!!"
            end
          end
        
          puts "Installing pre-requisite packages"
          out, ret = ssh(hostname, "cd /data/origin-dev-tools && su -c \"build/devenv install_required_packages\"", 60 * 30, true, 1, ssh_user)
          print_and_exit(ret, out) if ret != 0
          print_highlighted_output("Install Output", out)

          puts "Downgrading packages..."
          out = ssh(hostname, "su -c \"yum -y downgrade ruby ruby-libs ruby-rdoc ruby-irb ruby-devel qpid-cpp-server qpid-cpp-client qpid-qmf ruby-qpid-qmf qpid-cpp-client-devel\"", 60 * 5, false, 1, ssh_user)
          print_and_exit(ret, out) if ret != 0
          print_highlighted_output("Downgrade Output", out)
          
          # Add the paths to the users .bashrc file
          out, ret = ssh(hostname, "echo \"export PATH=/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:$PATH\" >> ~/.bashrc", 60, true, 1, ssh_user)

          if options.install_from_source? || options.install_from_local_source?
            puts "Installing Origin packages..."
            out, ret = ssh(hostname, "cd /data/origin-dev-tools && su -c \"build/devenv local_build\"", 60 * 20, true, 1, ssh_user)
            print_and_exit(ret, out) if ret != 0

            out = ssh(hostname, "su -c \"rpm -qa | grep openshift\"", 60, false, 1, ssh_user)
            print_highlighted_output("Installed Origin Packages", out)

            puts "Installing SELinux policies..."
            out, ret = ssh(hostname, "su -c \"yum install -y --skip-broken http://kojipkgs.fedoraproject.org/packages/selinux-policy/3.10.0/94.fc16/noarch/selinux-policy-3.10.0-94.fc16.noarch.rpm http://kojipkgs.fedoraproject.org//packages/selinux-policy/3.10.0/94.fc16/noarch/selinux-policy-targeted-3.10.0-94.fc16.noarch.rpm\"", 60 * 5, true, 1, ssh_user)
            print_and_exit(ret, out) unless ret == 0 || out.match(/Nothing to do/)

            puts "Running broker setup..."
            out, ret = ssh(hostname, "su -c /usr/sbin/oo-setup-broker", 60 * 20, true, 1, ssh_user)
            print_and_exit(ret, out) if ret != 0
          end
          
          out, ret = ssh(hostname, "su -c \"cd /data && chown -R ec2-user:ec2-user .\"", 60 * 2, true, 1, ssh_user)
          print_and_exit(ret, out) if ret != 0
          puts "Done"
      
          image_id = nil
          if options[:register]
            # reset the eth0 network config to remove the HWADDR
            puts "Removing HWADDR and DNS entries from eth0 network config..."
            reset_eth0_dns_config(hostname)
            
            manifest = rpm_manifest(hostname, ssh_user)              
            registered_ami = register_image(conn, instance, name + '_' + build_num, manifest)
            image_id = registered_ami.id
          end

          # Register broker dns and restart the network
          unless options.install_required_packages?  
            post_launch_setup(hostname)
            restart_services_remote(hostname)
          end

          unless options.skip_verify? || options.install_required_packages?
            scp_remote_tests(hostname, options.branch, "~", ssh_user)
            test_impl(name + '_' + build_num, hostname, instance, conn, options, image_id)
          end
          puts "Done."
        ensure
          begin
            terminate_instance(instance) if options.terminate?
          rescue
            # suppress termination errors - they have been logged already
          end
        end
      end
  
      def sanity_check_impl(tag, hostname, instance, conn, options, image_id=nil)
        threads = []
        failures = []
        titles = ["OpenShift Origin Broker Sanity",
                  "OpenShift Origin Node Unit"]
    
        cmds = ["su -c \"cd /var/www/openshift/broker; bundle exec rake test:sanity\"",
                "cd openshift-test/node; su -c \"rake unit_test\""]
        add_ssh_cmd_to_threads(hostname, threads, failures, titles, cmds, false, @@SSH_TIMEOUT, ssh_user)
        add_ssh_cmd_to_threads(hostname, threads, failures, "Cucumber Sanity", "cucumber #{CUCUMBER_OPTIONS} -t @sanity openshift-test/tests/", false, @@SSH_TIMEOUT, ssh_user)
    
        threads.each do |t|
          t[0].join
        end
    
        unless failures.empty?
          failures.uniq!
          retry_test_failures(hostname, failures, 1, @@SSH_TIMEOUT, ssh_user)
        end
      end
      
      def update_facts_impl(hostname)
        # Not required since this is handled by oo-setup-broker script
      end
      
      def post_launch_setup(hostname)
        # reset the eth0 network config to add the dns entries
        puts "Registering broker dns..."
        cmd = %{
su -c \"echo \\\"DEVICE=eth0
BOOTPROTO=dhcp
ONBOOT=yes
DNS1=127.0.0.1
DNS2=8.8.8.8
DNS3=8.8.4.4
DEFROUTE=yes
PEERROUTES=yes\\\" > /etc/sysconfig/network-scripts/ifcfg-eth0\"

su -c \"/etc/init.d/network restart\"
su -c \"service named restart\"

ext_address=`/sbin/ip addr show dev eth0 | grep inet | cut -d/ -f1 | rev | cut -d \" \" -f1 | rev`
su -c \"/usr/sbin/oo-register-dns -h broker -n $ext_address\"
}
        out, ret = ssh(hostname, cmd, 60 * 5, true, 1, ssh_user)
        print_and_exit(ret, out) if ret != 0
      end

      def reset_eth0_dns_config(hostname)
        # reset the eth0 network config to add the dns entries
        cmd = %{
su -c \"echo \\\"DEVICE=eth0
BOOTPROTO=dhcp
ONBOOT=yes\\\" > /etc/sysconfig/network-scripts/ifcfg-eth0\"

su -c \"/etc/init.d/network restart\"
su -c \"service named restart\"
}
        out, ret = ssh(hostname, cmd, 60 * 5, true, 1, ssh_user)
        print_and_exit(ret, out) if ret != 0
      end

      def restart_services_remote(hostname)
        puts "Restarting services..."

        cmd = %{
su -c \"service qpidd restart; service mcollective restart\"
su -c \"service httpd restart; service openshift-broker restart\"
}
        out, ret = ssh(hostname, cmd, 60 * 5, true, 1, ssh_user)
        print_and_exit(ret, out) if ret != 0

        puts "Sleep for 30 seconds after restarting services"
        sleep 30
        puts "Done"
      end

      def restart_services()
        puts "Restarting services..."
        run("cd /var/www/openshift/broker/ ; rm -f Gemfile.lock; bundle show; cd - ;")
        run("service qpidd restart; service mcollective restart", :verbose => true)
        run("service httpd restart; service openshift-broker restart;", :verbose => true)

        puts "Sleep for 30 seconds after restarting services"
        sleep 30
        puts "Done"
      end

    end # no_tasks end
  end # class end
end # module end
Origin::BuilderPlugin.start
